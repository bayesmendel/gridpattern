% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid-pattern.R
\name{grid.pattern}
\alias{grid.pattern}
\alias{patternGrob}
\title{Create patterned grobs}
\usage{
grid.pattern(
  pattern = "stripe",
  x = c(0, 0, 1, 1),
  y = c(1, 0, 0, 1),
  id = 1L,
  ...,
  legend = FALSE,
  prefix = "pattern_",
  default.units = "npc",
  name = NULL,
  gp = gpar(),
  draw = TRUE,
  vp = NULL
)

patternGrob(
  pattern = "stripe",
  x = c(0, 0, 1, 1),
  y = c(1, 0, 0, 1),
  id = 1L,
  ...,
  legend = FALSE,
  prefix = "pattern_",
  default.units = "npc",
  name = NULL,
  gp = gpar(),
  draw = TRUE,
  vp = NULL
)
}
\arguments{
\item{pattern}{Name of pattern.  See Details section for a list of supported patterns.}

\item{x}{A numeric vector or unit object specifying x-locations of the pattern boundary.}

\item{y}{A numeric vector or unit object specifying y-locations of the pattern boundary.}

\item{id}{A numeric vector used to separate locations in x, y into multiple boundaries.
All locations within the same \code{id} belong to the same boundary.}

\item{...}{Pattern parameters.}

\item{legend}{Whether this is intended to be drawn in a legend or not.}

\item{prefix}{Prefix to prepend to the name of each of the pattern parameters in \code{...}.
For compatibility with \code{ggpattern} most underlying functions assume parameters beginning with \code{pattern_}.}

\item{default.units}{A string indicating the default units to use if \code{x} or \code{y}
are only given as numeric vectors.}

\item{name}{ A character identifier. }

\item{gp}{An object of class \code{"gpar"}, typically the output
    from a call to the function \code{\link[grid]{gpar}}.  This is basically
    a list of graphical parameter settings.}

\item{draw}{A logical value indicating whether graphics output
    should be produced.}

\item{vp}{A Grid viewport object (or NULL).}
}
\value{
A grid grob object (invisibly in the case of \code{grid.pattern()}).
If \code{draw} is \code{TRUE} then \code{grid.pattern()} also draws to the graphic device as a side effect.
}
\description{
\code{grid.pattern()} draws patterned shapes onto the graphic device.
\code{patternGrob()} returns the grid grob objects.
}
\details{
Here is a list of the various patterns supported:

\describe{
\item{ambient}{Noise array patterns onto the graphic device powered by the \code{ambient} package.
See \code{\link[=grid.pattern_ambient]{grid.pattern_ambient()}} for more information.}
\item{circle}{Circle geometry patterns.
See \code{\link[=grid.pattern_circle]{grid.pattern_circle()}} for more information.}
\item{crosshatch}{Crosshatch geometry patterns.
See \code{\link[=grid.pattern_crosshatch]{grid.pattern_crosshatch()}} for more information.}
\item{gradient}{Gradient array patterns.
See \code{\link[=grid.pattern_gradient]{grid.pattern_gradient()}} for more information.}
\item{image}{Image array patterns.
See \code{\link[=grid.pattern_image]{grid.pattern_image()}} for more information.}
\item{magick}{\code{imagemagick} array patterns.
See \code{\link[=grid.pattern_magick]{grid.pattern_magick()}} for more information.}
\item{none}{Does nothing.
See \code{\link[grid:grid.null]{grid::grid.null()}} for more information.}
\item{placeholder}{Placeholder image array patterns.
See \code{\link[=grid.pattern_placeholder]{grid.pattern_placeholder()}} for more information.}
\item{plasma}{Plasma array patterns.
See \code{\link[=grid.pattern_plasma]{grid.pattern_plasma()}} for more information.}
\item{stripe}{Stripe geometry patterns.
See \code{\link[=grid.pattern_stripe]{grid.pattern_stripe()}} for more information.}
\item{Custom geometry-based patterns}{See \url{https://coolbutuseless.github.io/package/ggpattern/articles/developing-patterns-2.html} for more information.}
\item{Custom array-based patterns}{See \url{https://coolbutuseless.github.io/package/ggpattern/articles/developing-patterns-3.html} for more information.}
}
}
\examples{
 if (require("grid")) {
   x_hex <- 0.5 + 0.5 * cos(seq(2 * pi / 4, by = 2 * pi / 6, length.out = 6))
   y_hex <- 0.5 + 0.5 * sin(seq(2 * pi / 4, by = 2 * pi / 6, length.out = 6))
   # geometry-based patterns
   grid.newpage()
   grid.pattern()
   grid.newpage()
   grid.pattern("stripe", x_hex, y_hex,
                colour="black", fill=c("yellow", "blue"), density = 0.5)
   grid.newpage()
   # In some cases can also alternatively use "gpar()" to specify colour and line attributes
   x <- c(0.1, 0.6, 0.8, 0.3)
   y <- c(0.2, 0.3, 0.8, 0.5)
   grid.pattern("stripe", x, y, gp = gpar(col="blue", fill="red", lwd=2))
   grid.newpage()
   grid.pattern("crosshatch", x_hex, y_hex,
                colour="black", fill="yellow", fill2="blue", angle=45)
   grid.newpage()
   grid.pattern("circle", x_hex, y_hex,
                colour="blue", fill="yellow", size = 2, density = 0.5)

   # array-based patterns
   if (requireNamespace("ambient")) {
     grid::grid.newpage()
     grid.pattern("ambient", x_hex, y_hex, fill = "green", fill2 = "blue")
   }
   grid.newpage()
   grid.pattern("gradient", x_hex, y_hex,
                fill="blue", fill2="green", orientation="radial")
   logo_filename <- system.file("img", "Rlogo.png" , package="png")
   grid.newpage()
   grid.pattern("image", x_hex, y_hex, filename=logo_filename, type="fit")
   grid.newpage()
   grid.pattern("magick", x_hex, y_hex, type="octagons", fill="blue", scale=2)
   \dontrun{
     # requires internet connection to download from placeholder image websites
     grid.newpage()
     grid.pattern("placeholder", x_hex, y_hex, type="bear")
   }
   grid.newpage()
   grid.pattern("plasma", x_hex, y_hex, fill="green")
 }
}
\seealso{
\url{https://coolbutuseless.github.io/package/ggpattern/index.html}
for more details on the patterns and their parameters.
}
