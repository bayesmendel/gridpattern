% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pattern-geometry-regular_polygon.R
\name{grid.pattern_regular_polygon}
\alias{grid.pattern_regular_polygon}
\title{Regular polygon patterned grobs}
\usage{
grid.pattern_regular_polygon(
  x = c(0, 0, 1, 1),
  y = c(1, 0, 0, 1),
  id = 1L,
  ...,
  colour = gp$col \%||\% "grey20",
  fill = gp$fill \%||\% "grey80",
  angle = 30,
  density = 0.2,
  spacing = 0.05,
  xoffset = 0,
  yoffset = 0,
  scale = 0.5,
  shape = "convex4",
  type = "square",
  rot = 0,
  alpha = gp$alpha \%||\% NA_real_,
  linetype = gp$lty \%||\% 1,
  size = gp$lwd \%||\% 1,
  default.units = "npc",
  name = NULL,
  gp = gpar(),
  draw = TRUE,
  vp = NULL
)
}
\arguments{
\item{x}{A numeric vector or unit object specifying x-locations of the pattern boundary.}

\item{y}{A numeric vector or unit object specifying y-locations of the pattern boundary.}

\item{id}{A numeric vector used to separate locations in x, y into multiple boundaries.
All locations within the same \code{id} belong to the same boundary.}

\item{...}{Currently ignored}

\item{colour}{Stroke colour}

\item{fill}{Fill colour}

\item{angle}{Rotation angle in degrees}

\item{density}{Approx. fraction of area the pattern fills (between 0 and 1)}

\item{spacing}{Spacing between repetitions of pattern (between 0 and 1)}

\item{xoffset}{Shift pattern along x axis (between 0 and 1)}

\item{yoffset}{Shift pattern along y axis (between 0 and 1)}

\item{scale}{For star polygons, multiplier (between 0 and 1)
applied to exterior radius to get interior radius.}

\item{shape}{Either "convex" or "star" followed by the number of exterior vertices
or "circle".  For example \code{"convex4"} (default) corresponds to a square
whereas \code{"star6"} corresponds to a six-pointed star.}

\item{type}{Either \code{"square"} (default) or \code{"hex"}.
Adjusts layout, density, and repeating of certain aesthetics to aid in achieving a "tiling" effect.
Note \code{"hex"} is also good for a layout of triangles.}

\item{rot}{Angle to rotate regular polygon (degrees, counter-clockwise).}

\item{alpha}{Alpha (between 0 and 1) or \code{NA} (default, preserves colors' alpha value)}

\item{linetype}{Stroke linetype}

\item{size}{Stroke linewidth}

\item{default.units}{A string indicating the default units to use if \code{x} or \code{y}
are only given as numeric vectors.}

\item{name}{ A character identifier. }

\item{gp}{An object of class \code{"gpar"}, typically the output
    from a call to the function \code{\link[grid]{gpar}}.  This is basically
    a list of graphical parameter settings.}

\item{draw}{A logical value indicating whether graphics output
    should be produced.}

\item{vp}{A Grid viewport object (or NULL).}
}
\value{
A grid grob object invisibly.  If \code{draw} is \code{TRUE} then also draws to the graphic device as a side effect.
}
\description{
\code{grid.pattern_regular_polygon()} draws a regular polygon pattern onto the graphic device.
}
\examples{
  if (require("grid")) {
    x_hex <- 0.5 + 0.5 * cos(seq(2 * pi / 4, by = 2 * pi / 6, length.out = 6))
    y_hex <- 0.5 + 0.5 * sin(seq(2 * pi / 4, by = 2 * pi / 6, length.out = 6))
    # basic checker pattern
    grid.pattern_regular_polygon(x_hex, y_hex, density = 1.0,
                                 colour = "black", fill = "blue")
    # alternative checker patten
    grid.newpage()
    grid.pattern_regular_polygon(x_hex, y_hex,
                                 colour = "transparent",
                                 fill = c("black", "red", "blue", "yellow"),
                                 angle = 0, rot = 45, density = 1.414, spacing = 0.2)
    # eight-pointed star tiling
    grid.newpage()
    grid.pattern_regular_polygon(x_hex, y_hex, colour = "black",
                                 fill = c("blue", "yellow"),
                                 density = 1.0, spacing = 0.1, shape = "star8")
    # hexagon tiling
    grid.newpage()
    grid.pattern_regular_polygon(x_hex, y_hex, color = "transparent",
                                 fill = c("white", "grey", "black"),
                                 density = 1.0, spacing = 0.1,
                                 shape = "convex6", type = "hex")
    # three-pointed star
    grid.newpage()
    grid.pattern_regular_polygon(x_hex, y_hex, fill = "green",
                                 density = 1.0, spacing = 0.1,
                                 shape = "star3", type = "hex")
  }
}
